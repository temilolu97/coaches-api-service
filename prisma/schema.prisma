// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(255)
  lastName String @db.VarChar(255)
  email String? @unique @map("emailAddress")
  mobileNumber String @unique
  password String @db.VarChar(255)
  state String 
  isActive Boolean @default(false)
  localGovernment String
  userType UserType @relation(fields:[userTypeId], references:[id])
  userTypeId Int @default(2)
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  courses UserCourse[]
  licenseHistories LicenseHistory[]
  @@map("Users")
}

model UserType {
  id Int @id @default(autoincrement())
  name String 
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  users User[]
  @@map("UserTypes")
}

model YearlyDue {
  id Int @id @default(autoincrement())
  year String 
  amount Float
  createdBy Int @default(-1)
  dateCreated DateTime @default(now())
  dateUpdated DateTime?
  @@map("YearlyDues")
}

model PaymentType{
  id Int @id @default(autoincrement())
  type String
  createdBy Int @default(-1)
  dateCreated DateTime @default(now())
  dateUpdated DateTime?
  payments Payment[]
  @@map("PaymentTypes")
}

model Payment{
  id Int @id @default(autoincrement())
  amount Float
  currency String @default("NGN")
  paymentType PaymentType @relation(fields:[paymentTypeId], references:[id]) 
  paymentTypeId Int
  transactionReference String
  providerReference String?
  providerResponse String?
  paymentStatus PaymentStatus @relation(fields:[statusId], references:[id])
  statusId Int
  Status String @default("Initiated")
  
  @@map("Payments")
}

model PaymentStatus{
  id Int @id @default(autoincrement())
  status String
  dateCreated DateTime @default(now())
  dateUpdated DateTime?
  payments Payment[]

  @@map("PaymentStatuses")
}

model Course{
  id Int @id @default(autoincrement())
  title String
  category String
  price Float
  courseLevel String
  dateCreated DateTime @default(now())
  dateUpdated DateTime?
  users UserCourse[]

  @@map("Courses")
}

model UserCourse{
  id Int @id @default(autoincrement())
  userId Int 
  user User @relation(fields:[userId], references:[id])
  courseId Int
  course Course @relation(fields:[courseId], references:[id])
  progress Int @default(0)
  dateEnrolled DateTime @default(now())

  @@unique([userId, courseId]) //ensures no duplicate pair
}

model LicenseHistory{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields:[userId], references:[id])
  licenseNumber String @unique
  issueDate DateTime
  expiryDate DateTime
  type  String?
  status String

  @@map("LicenseHistories")
}